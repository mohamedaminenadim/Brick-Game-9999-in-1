<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="240" passed="238" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-04-22T10:09:14 CEST" name="Surefire suite" finished-at="2024-04-22T10:10:24 CEST" duration-ms="69767">
    <groups>
    </groups>
    <test started-at="2024-04-22T10:09:14 CEST" name="Surefire test" finished-at="2024-04-22T10:10:24 CEST" duration-ms="69767">
      <class name="com.github.vitalibo.brickgame.core.ControllerTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:09:15 CEST" name="setUp" finished-at="2024-04-22T10:10:01 CEST" duration-ms="46100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testChangePause()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:01 CEST" name="testChangePause" finished-at="2024-04-22T10:10:01 CEST" duration-ms="603" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangePause -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:01 CEST" name="setUp" finished-at="2024-04-22T10:10:02 CEST" duration-ms="379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testChangeSound()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="testChangeSound" finished-at="2024-04-22T10:10:02 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeSound -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="setUp" finished-at="2024-04-22T10:10:02 CEST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:02 CEST" duration-ms="28" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2befa0@40a8a26f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="setUp" finished-at="2024-04-22T10:10:02 CEST" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:02 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf1c8@11228bee]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="setUp" finished-at="2024-04-22T10:10:02 CEST" duration-ms="237" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:02 CEST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf3f0@d8e4250]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="setUp" finished-at="2024-04-22T10:10:02 CEST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:02 CEST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf618@6f240187]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:02 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="169" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:03 CEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf840@704c3bdf]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="41" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:03 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2befa0@40a8a26f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:03 CEST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf1c8@11228bee]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="25" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:03 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf3f0@d8e4250]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:03 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf618@6f240187]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int,java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-04-22T10:10:03 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda/0x0000013bce2bf840@704c3bdf]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testReset()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@12b0404f]" started-at="2024-04-22T10:10:03 CEST" name="testReset" finished-at="2024-04-22T10:10:03 CEST" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReset -->
      </class> <!-- com.github.vitalibo.brickgame.core.ControllerTest -->
      <class name="com.github.vitalibo.brickgame.core.KernelTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.KernelTest@78b66d36]" started-at="2024-04-22T10:10:05 CEST" name="setUp" finished-at="2024-04-22T10:10:05 CEST" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testJob()[pri:0, instance:com.github.vitalibo.brickgame.core.KernelTest@78b66d36]" started-at="2024-04-22T10:10:05 CEST" name="testJob" finished-at="2024-04-22T10:10:05 CEST" duration-ms="299" status="FAIL">
          <exception class="org.mockito.exceptions.verification.WantedButNotInvoked">
            <message>
              <![CDATA[
Wanted but not invoked:
mockConsumer.accept(
    com.github.vitalibo.brickgame.core.Kernel$Job@1530d0f2
);
-> at com.github.vitalibo.brickgame.core.KernelTest.testJob(KernelTest.java:37)
Actually, there were zero interactions with this mock.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[Wanted but not invoked:
mockConsumer.accept(
    com.github.vitalibo.brickgame.core.Kernel$Job@1530d0f2
);
-> at com.github.vitalibo.brickgame.core.KernelTest.testJob(KernelTest.java:37)
Actually, there were zero interactions with this mock.

at com.github.vitalibo.brickgame.core.KernelTest.testJob(KernelTest.java:37)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- org.mockito.exceptions.verification.WantedButNotInvoked -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJob -->
      </class> <!-- com.github.vitalibo.brickgame.core.KernelTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.BrickTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="62" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:09 CEST" name="testNotRepaint" finished-at="2024-04-22T10:10:09 CEST" duration-ms="37" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintState(boolean,java.awt.Color)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:09 CEST" name="testPaintState" data-provider="samples" finished-at="2024-04-22T10:10:10 CEST" duration-ms="965" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.awt.Color[r=97,g=112,b=91]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintState -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:10 CEST" name="setUp" finished-at="2024-04-22T10:10:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintState(boolean,java.awt.Color)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:10 CEST" name="testPaintState" data-provider="samples" finished-at="2024-04-22T10:10:10 CEST" duration-ms="16" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.awt.Color[r=0,g=0,b=0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintState -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:10 CEST" name="setUp" finished-at="2024-04-22T10:10:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@22a637e7]" started-at="2024-04-22T10:10:10 CEST" name="testRepaint" finished-at="2024-04-22T10:10:10 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.BrickTest -->
      <class name="com.github.vitalibo.brickgame.core.CountdownJobTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.CountdownJobTest@10e92f8f]" started-at="2024-04-22T10:10:03 CEST" name="setUp" finished-at="2024-04-22T10:10:03 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCountdown()[pri:0, instance:com.github.vitalibo.brickgame.core.CountdownJobTest@10e92f8f]" started-at="2024-04-22T10:10:03 CEST" name="testCountdown" finished-at="2024-04-22T10:10:04 CEST" duration-ms="206" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at com.github.vitalibo.brickgame.core.CountdownJobTest.testCountdown(CountdownJobTest.java:28)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountdown -->
      </class> <!-- com.github.vitalibo.brickgame.core.CountdownJobTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.MouseTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testEatMouse()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testEatMouse" finished-at="2024-04-22T10:10:23 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatMouse -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=11, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=12, x=7)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=0, x=8)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=11, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="99" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=17, x=8)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=19, x=8)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=8, x=0)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=5, x=9)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=3, x=7)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=15, x=7)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=11, x=0)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=5, x=3)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=9, x=4)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=15, x=8)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=12, x=9)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=5, x=8)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=3, x=4)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=4, x=9)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=12, x=6)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List,com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testNextPoint" data-provider="generator" finished-at="2024-04-22T10:10:23 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=19, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testStream()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@64cd705f]" started-at="2024-04-22T10:10:23 CEST" name="testStream" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStream -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.MouseTest -->
      <class name="com.github.vitalibo.brickgame.core.JobTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@7ce3cb8e]" started-at="2024-04-22T10:10:04 CEST" name="setUp" finished-at="2024-04-22T10:10:04 CEST" duration-ms="194" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testKill()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@7ce3cb8e]" started-at="2024-04-22T10:10:04 CEST" name="testKill" finished-at="2024-04-22T10:10:04 CEST" duration-ms="256" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKill -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@7ce3cb8e]" started-at="2024-04-22T10:10:04 CEST" name="setUp" finished-at="2024-04-22T10:10:05 CEST" duration-ms="398" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPause()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@7ce3cb8e]" started-at="2024-04-22T10:10:05 CEST" name="testPause" finished-at="2024-04-22T10:10:05 CEST" duration-ms="482" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPause -->
      </class> <!-- com.github.vitalibo.brickgame.core.JobTest -->
      <class name="com.github.vitalibo.brickgame.game.race.CarTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCarCrashed()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="testCarCrashed" finished-at="2024-04-22T10:10:15 CEST" duration-ms="8" status="PASS">
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[car crashed]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: car crashed, point=Point(y=4, x=5))
at com.github.vitalibo.brickgame.game.race.Car.verifyCrash(Car.java:68)
at com.github.vitalibo.brickgame.game.race.CarTest.testCarCrashed(CarTest.java:59)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCarCrashed -->
        <test-method signature="testDown()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="testDown" finished-at="2024-04-22T10:10:15 CEST" duration-ms="75" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLeft()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="testLeft" finished-at="2024-04-22T10:10:15 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeft -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRight()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="testRight" finished-at="2024-04-22T10:10:15 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRight -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@6e4784bc]" started-at="2024-04-22T10:10:15 CEST" name="testVerifyPassed" finished-at="2024-04-22T10:10:15 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.race.CarTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.BrickPanelTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:07 CEST" duration-ms="1593" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testBrickSize()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:07 CEST" name="testBrickSize" finished-at="2024-04-22T10:10:07 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrickSize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:07 CEST" name="setUp" finished-at="2024-04-22T10:10:07 CEST" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:07 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:07 CEST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:07 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="336" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="52" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="73" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="64" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="36" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="34" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="41" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:08 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="setUp" finished-at="2024-04-22T10:10:08 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:08 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="88" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="25" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="90" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="190" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="19" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="setUp" finished-at="2024-04-22T10:10:09 CEST" duration-ms="97" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@69b2283a]" started-at="2024-04-22T10:10:09 CEST" name="testDraw" data-provider="samples" finished-at="2024-04-22T10:10:09 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.BrickPanelTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.IconPanelTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="443" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:13 CEST" name="testNotRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="193" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:14 CEST" name="testNotRepaint" data-provider="samples" finished-at="2024-04-22T10:10:14 CEST" duration-ms="33" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:14 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:14 CEST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="70" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@1d119efb]" started-at="2024-04-22T10:10:14 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:14 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.IconPanelTest -->
      <class name="com.github.vitalibo.brickgame.game.tetris.BoardTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testAdd()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testAdd" finished-at="2024-04-22T10:10:23 CEST" duration-ms="281" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAdd -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCleanUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testCleanUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="36" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCleanUp -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testInit" data-provider="levels" finished-at="2024-04-22T10:10:23 CEST" duration-ms="18" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testInit" data-provider="levels" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testInit" data-provider="levels" finished-at="2024-04-22T10:10:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testInit" data-provider="levels" finished-at="2024-04-22T10:10:23 CEST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIsFull()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testIsFull" finished-at="2024-04-22T10:10:23 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsFull -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerify()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@654f0d9c]" started-at="2024-04-22T10:10:23 CEST" name="testVerify" finished-at="2024-04-22T10:10:24 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerify -->
      </class> <!-- com.github.vitalibo.brickgame.game.tetris.BoardTest -->
      <class name="com.github.vitalibo.brickgame.util.CanvasTranslatorTest">
        <test-method signature="testFrom()[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@63355449]" started-at="2024-04-22T10:10:24 CEST" name="testFrom" finished-at="2024-04-22T10:10:24 CEST" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFrom -->
        <test-method signature="testFromStream(int,int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@63355449]" started-at="2024-04-22T10:10:24 CEST" name="testFromStream" data-provider="samples" finished-at="2024-04-22T10:10:24 CEST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
        <test-method signature="testFromStream(int,int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@63355449]" started-at="2024-04-22T10:10:24 CEST" name="testFromStream" data-provider="samples" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
        <test-method signature="testFromStream(int,int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@63355449]" started-at="2024-04-22T10:10:24 CEST" name="testFromStream" data-provider="samples" finished-at="2024-04-22T10:10:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
      </class> <!-- com.github.vitalibo.brickgame.util.CanvasTranslatorTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.DirectionTest">
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction,com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@4b0b0854]" started-at="2024-04-22T10:10:15 CEST" name="testReverse" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DOWN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UP]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction,com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@4b0b0854]" started-at="2024-04-22T10:10:15 CEST" name="testReverse" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[UP]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DOWN]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction,com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@4b0b0854]" started-at="2024-04-22T10:10:15 CEST" name="testReverse" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[LEFT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[RIGHT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction,com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@4b0b0854]" started-at="2024-04-22T10:10:15 CEST" name="testReverse" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[RIGHT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LEFT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction,com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@4b0b0854]" started-at="2024-04-22T10:10:15 CEST" name="testReverse" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[NOT_DEFINED]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[NOT_DEFINED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.DirectionTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.MapTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCrashOnBorder(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-04-22T10:10:15 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=0, x=0))
at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCrashOnBorder(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=1, x=1))
at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCrashOnBorder(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=0, x=2))
at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCrashOnBorder(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=2, x=0))
at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="185" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="88" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="16" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:16 CEST" duration-ms="920" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:16 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:17 CEST" duration-ms="98" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:17 CEST" name="setUp" finished-at="2024-04-22T10:10:17 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:17 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:17 CEST" duration-ms="908" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:17 CEST" name="setUp" finished-at="2024-04-22T10:10:18 CEST" duration-ms="255" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:18 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:18 CEST" duration-ms="239" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:18 CEST" name="setUp" finished-at="2024-04-22T10:10:19 CEST" duration-ms="567" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:19 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:19 CEST" duration-ms="103" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:19 CEST" name="setUp" finished-at="2024-04-22T10:10:19 CEST" duration-ms="626" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:19 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:20 CEST" duration-ms="697" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[14]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:20 CEST" name="setUp" finished-at="2024-04-22T10:10:20 CEST" duration-ms="322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:20 CEST" name="testLoadingMap" data-provider="levels" finished-at="2024-04-22T10:10:21 CEST" duration-ms="530" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:21 CEST" name="setUp" finished-at="2024-04-22T10:10:21 CEST" duration-ms="156" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testUnmodifiableList()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:21 CEST" name="testUnmodifiableList" finished-at="2024-04-22T10:10:21 CEST" duration-ms="1" status="PASS">
          <exception class="java.lang.UnsupportedOperationException">
            <full-stacktrace>
              <![CDATA[java.lang.UnsupportedOperationException
at java.base/java.util.Collections$UnmodifiableCollection.add(Collections.java:1091)
at com.github.vitalibo.brickgame.game.snake.Map.add(Map.java:18)
at com.github.vitalibo.brickgame.game.snake.MapTest.testUnmodifiableList(MapTest.java:37)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.UnsupportedOperationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableList -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:21 CEST" name="setUp" finished-at="2024-04-22T10:10:21 CEST" duration-ms="404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:21 CEST" name="testVerifyPassed" data-provider="samples" finished-at="2024-04-22T10:10:21 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:21 CEST" name="setUp" finished-at="2024-04-22T10:10:22 CEST" duration-ms="201" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:22 CEST" name="testVerifyPassed" data-provider="samples" finished-at="2024-04-22T10:10:22 CEST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:22 CEST" name="setUp" finished-at="2024-04-22T10:10:22 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:22 CEST" name="testVerifyPassed" data-provider="samples" finished-at="2024-04-22T10:10:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:22 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="975" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@19bb07ed]" started-at="2024-04-22T10:10:23 CEST" name="testVerifyPassed" data-provider="samples" finished-at="2024-04-22T10:10:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.MapTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.NumberPanelTest">
        <test-method signature="testDigitSequence(int,int,java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testDigitSequence" data-provider="samplesDigitSequence" finished-at="2024-04-22T10:10:14 CEST" duration-ms="186" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method signature="testDigitSequence(int,int,java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testDigitSequence" data-provider="samplesDigitSequence" finished-at="2024-04-22T10:10:14 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method signature="testDigitSequence(int,int,java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testDigitSequence" data-provider="samplesDigitSequence" finished-at="2024-04-22T10:10:14 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1234567890]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-04-22T10:10:14 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-04-22T10:10:14 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-04-22T10:10:14 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-04-22T10:10:14 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[999]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testSetIllegalValue()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@659a969b]" started-at="2024-04-22T10:10:14 CEST" name="testSetIllegalValue" finished-at="2024-04-22T10:10:14 CEST" duration-ms="1" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be mere 0.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be mere 0.
at com.github.vitalibo.brickgame.core.ui.NumberPanel.set(NumberPanel.java:49)
at com.github.vitalibo.brickgame.core.ui.NumberPanelTest.testSetIllegalValue(NumberPanelTest.java:42)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.NumberPanelTest -->
      <class name="com.github.vitalibo.brickgame.game.ShapeTest">
        <test-method signature="testShapeEquals(com.github.vitalibo.brickgame.game.Shape,com.github.vitalibo.brickgame.game.Shape)[pri:0, instance:com.github.vitalibo.brickgame.game.ShapeTest@e056f20]" started-at="2024-04-22T10:10:15 CEST" name="testShapeEquals" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@3aa1c45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@6d45dd4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShapeEquals -->
        <test-method signature="testShapeEquals(com.github.vitalibo.brickgame.game.Shape,com.github.vitalibo.brickgame.game.Shape)[pri:0, instance:com.github.vitalibo.brickgame.game.ShapeTest@e056f20]" started-at="2024-04-22T10:10:15 CEST" name="testShapeEquals" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@5f65e0c0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@566cc6af]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShapeEquals -->
      </class> <!-- com.github.vitalibo.brickgame.game.ShapeTest -->
      <class name="com.github.vitalibo.brickgame.game.PointTest">
        <test-method signature="testMoveDown(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveDown" data-provider="samplesMoveVertical" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveDown -->
        <test-method signature="testMoveDown(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveDown" data-provider="samplesMoveVertical" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveDown -->
        <test-method signature="testMoveLeft(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveLeft" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveLeft -->
        <test-method signature="testMoveLeft(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveLeft" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveLeft -->
        <test-method signature="testMoveRight(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveRight" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T10:10:15 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveRight -->
        <test-method signature="testMoveRight(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveRight" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveRight -->
        <test-method signature="testMoveUp(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveUp" data-provider="samplesMoveVertical" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveUp -->
        <test-method signature="testMoveUp(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testMoveUp" data-provider="samplesMoveVertical" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveUp -->
        <test-method signature="testVerifyFailed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The Y value must be in the range 0 - 19.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The Y value must be in the range 0 - 19., point=Point(y=-1, x=0))
at com.github.vitalibo.brickgame.game.Point.verify(Point.java:58)
at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testVerifyFailed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The X value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The X value must be in the range 0 - 9., point=Point(y=0, x=-1))
at com.github.vitalibo.brickgame.game.Point.verify(Point.java:54)
at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testVerifyFailed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The Y value must be in the range 0 - 19.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The Y value must be in the range 0 - 19., point=Point(y=20, x=0))
at com.github.vitalibo.brickgame.game.Point.verify(Point.java:58)
at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testVerifyFailed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-04-22T10:10:15 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The X value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The X value must be in the range 0 - 9., point=Point(y=0, x=10))
at com.github.vitalibo.brickgame.game.Point.verify(Point.java:54)
at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testVerifyPassed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testVerifyPassed" data-provider="samplesInBounds" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method signature="testVerifyPassed(int,int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@5a63f509]" started-at="2024-04-22T10:10:15 CEST" name="testVerifyPassed" data-provider="samplesInBounds" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.PointTest -->
      <class name="com.github.vitalibo.brickgame.util.BooleanCollectorTest">
        <test-method signature="testToArray()[pri:0, instance:com.github.vitalibo.brickgame.util.BooleanCollectorTest@6580cfdd]" started-at="2024-04-22T10:10:24 CEST" name="testToArray" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToArray -->
        <test-method signature="testToTwoDimensionalArray()[pri:0, instance:com.github.vitalibo.brickgame.util.BooleanCollectorTest@6580cfdd]" started-at="2024-04-22T10:10:24 CEST" name="testToTwoDimensionalArray" finished-at="2024-04-22T10:10:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToTwoDimensionalArray -->
      </class> <!-- com.github.vitalibo.brickgame.util.BooleanCollectorTest -->
      <class name="com.github.vitalibo.brickgame.game.race.RoadTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.RoadTest@34b7ac2f]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDown()[pri:0, instance:com.github.vitalibo.brickgame.game.race.RoadTest@34b7ac2f]" started-at="2024-04-22T10:10:15 CEST" name="testDown" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDown -->
      </class> <!-- com.github.vitalibo.brickgame.game.race.RoadTest -->
      <class name="com.github.vitalibo.brickgame.game.LifeTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="84" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="reset" finished-at="2024-04-22T10:10:14 CEST" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method signature="cleanUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="cleanUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="reset" finished-at="2024-04-22T10:10:14 CEST" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="testNotRepaint" finished-at="2024-04-22T10:10:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="reset" finished-at="2024-04-22T10:10:14 CEST" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method signature="testRepaint(int,[[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:14 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@5606d537]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="reset" finished-at="2024-04-22T10:10:14 CEST" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method signature="testRepaint(int,[[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:14 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@e3692ca]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int,[[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:14 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@1983a4e4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="reset" finished-at="2024-04-22T10:10:14 CEST" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="reset" finished-at="2024-04-22T10:10:14 CEST" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="setUp" finished-at="2024-04-22T10:10:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int,[[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:14 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="61" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@45b6c666]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:15 CEST" name="setUp" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:15 CEST" name="reset" finished-at="2024-04-22T10:10:15 CEST" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method signature="testRepaint(int,[[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@76908cc0]" started-at="2024-04-22T10:10:15 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:15 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[16]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@74d53d63]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.game.LifeTest -->
      <class name="com.github.vitalibo.brickgame.util.BuilderTest">
        <test-method signature="testMap()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@7e0b85f9]" started-at="2024-04-22T10:10:24 CEST" name="testMap" finished-at="2024-04-22T10:10:24 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@7e0b85f9]" started-at="2024-04-22T10:10:24 CEST" name="setUp" finished-at="2024-04-22T10:10:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@7e0b85f9]" started-at="2024-04-22T10:10:24 CEST" name="setUp" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testWith()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@7e0b85f9]" started-at="2024-04-22T10:10:24 CEST" name="testWith" finished-at="2024-04-22T10:10:24 CEST" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWith -->
      </class> <!-- com.github.vitalibo.brickgame.util.BuilderTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.SnakeTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testEatSelf(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="testEatSelf" data-provider="samplesCrashed" finished-at="2024-04-22T10:10:23 CEST" duration-ms="111" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=0)]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake ate itself]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake ate itself, point=Point(y=0, x=0))
at com.github.vitalibo.brickgame.game.snake.Snake.lambda$verifyEatSelf$0(Snake.java:33)
at java.base/java.util.Optional.ifPresent(Optional.java:178)
at com.github.vitalibo.brickgame.game.snake.Snake.verifyEatSelf(Snake.java:32)
at com.github.vitalibo.brickgame.game.snake.SnakeTest.testEatSelf(SnakeTest.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatSelf -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testEatSelf(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="testEatSelf" data-provider="samplesCrashed" finished-at="2024-04-22T10:10:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=1)]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake ate itself]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake ate itself, point=Point(y=0, x=1))
at com.github.vitalibo.brickgame.game.snake.Snake.lambda$verifyEatSelf$0(Snake.java:33)
at java.base/java.util.Optional.ifPresent(Optional.java:178)
at com.github.vitalibo.brickgame.game.snake.Snake.verifyEatSelf(Snake.java:32)
at com.github.vitalibo.brickgame.game.snake.SnakeTest.testEatSelf(SnakeTest.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatSelf -->
        <test-method signature="testHead()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="testHead" finished-at="2024-04-22T10:10:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHead -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInit()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="testInit" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="testVerifyPassed" data-provider="samples" finished-at="2024-04-22T10:10:23 CEST" duration-ms="18" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="testVerifyPassed" data-provider="samples" finished-at="2024-04-22T10:10:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=5, x=5)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@9225652]" started-at="2024-04-22T10:10:23 CEST" name="setUp" finished-at="2024-04-22T10:10:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.SnakeTest -->
      <class name="com.github.vitalibo.brickgame.core.StateTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@bef2d72]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testChangeState(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@bef2d72]" started-at="2024-04-22T10:10:06 CEST" name="testChangeState" data-provider="samples" finished-at="2024-04-22T10:10:06 CEST" duration-ms="123" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeState -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@bef2d72]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testChangeState(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@bef2d72]" started-at="2024-04-22T10:10:06 CEST" name="testChangeState" data-provider="samples" finished-at="2024-04-22T10:10:06 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeState -->
      </class> <!-- com.github.vitalibo.brickgame.core.StateTest -->
      <class name="com.github.vitalibo.brickgame.core.NumberTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:05 CEST" name="setUp" finished-at="2024-04-22T10:10:05 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDec(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:05 CEST" name="testDec" data-provider="samples" finished-at="2024-04-22T10:10:05 CEST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:05 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDec(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testDec" data-provider="samples" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[101]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDec(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testDec" data-provider="samples" finished-at="2024-04-22T10:10:06 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12346]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDecStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method signature="testDecStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12445]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDecStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[24690]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method signature="testDecStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[54321]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[66666]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInc(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testInc" data-provider="samples" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInc(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testInc" data-provider="samples" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[101]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method signature="testInc(int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testInc" data-provider="samples" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12346]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIncStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIncStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12445]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIncStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[24690]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method signature="testIncStep(int,int,int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-04-22T10:10:06 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[54321]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[66666]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@5223e5ee]" started-at="2024-04-22T10:10:06 CEST" name="setUp" finished-at="2024-04-22T10:10:06 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.core.NumberTest -->
      <class name="com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest">
        <test-method signature="testCreate(java.util.function.Function,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testCreate" data-provider="functions" finished-at="2024-04-22T10:10:24 CEST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce3291d8@58ad0586]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.I]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testCreate" data-provider="functions" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce329410@1c5fd813]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.J]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testCreate" data-provider="functions" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce329648@4abdd5e]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.L]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testCreate" data-provider="functions" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce329880@7b9fea11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.O]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testCreate" data-provider="functions" finished-at="2024-04-22T10:10:24 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce329ab8@56e78538]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.S]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testCreate" data-provider="functions" finished-at="2024-04-22T10:10:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce329cf0@6fe9c048]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.T]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testCreate" data-provider="functions" finished-at="2024-04-22T10:10:24 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce329f28@5c34b0f2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.Z]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testGenerate(java.util.function.Supplier,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testGenerate" data-provider="suppliers" finished-at="2024-04-22T10:10:24 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce32a160@54530644]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.I]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testGenerate" data-provider="suppliers" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce32a378@64b8eb96]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.J]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testGenerate" data-provider="suppliers" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce32a590@2d23a5be]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.L]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testGenerate" data-provider="suppliers" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce32a7a8@726d8fa0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.O]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testGenerate" data-provider="suppliers" finished-at="2024-04-22T10:10:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce32a9c0@666b1244]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.S]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testGenerate" data-provider="suppliers" finished-at="2024-04-22T10:10:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce32abd8@789d8fd6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.T]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier,java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@6a400542]" started-at="2024-04-22T10:10:24 CEST" name="testGenerate" data-provider="suppliers" finished-at="2024-04-22T10:10:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda/0x0000013bce32adf0@3ae87e38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.Z]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
      </class> <!-- com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.DigitTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:10 CEST" name="setUp" finished-at="2024-04-22T10:10:11 CEST" duration-ms="408" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:11 CEST" name="testNotRepaint" finished-at="2024-04-22T10:10:11 CEST" duration-ms="19" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:11 CEST" name="setUp" finished-at="2024-04-22T10:10:11 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:11 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:12 CEST" duration-ms="1213" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="setUp" finished-at="2024-04-22T10:10:12 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:12 CEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="setUp" finished-at="2024-04-22T10:10:12 CEST" duration-ms="22" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:12 CEST" duration-ms="17" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="setUp" finished-at="2024-04-22T10:10:12 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:12 CEST" duration-ms="28" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="setUp" finished-at="2024-04-22T10:10:12 CEST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:12 CEST" duration-ms="24" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="setUp" finished-at="2024-04-22T10:10:12 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:12 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="257" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testPaintDigit" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="178" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="23" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="104" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testRepaint" data-provider="samples" finished-at="2024-04-22T10:10:13 CEST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSetIllegalValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testSetIllegalValue" data-provider="samplesIllegalValue" finished-at="2024-04-22T10:10:13 CEST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be in the range 0 - 9.
at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:83)
at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:82)
at com.github.vitalibo.brickgame.core.ui.DigitTest.testSetIllegalValue(DigitTest.java:72)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="setUp" finished-at="2024-04-22T10:10:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSetIllegalValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@6fe7aac8]" started-at="2024-04-22T10:10:13 CEST" name="testSetIllegalValue" data-provider="samplesIllegalValue" finished-at="2024-04-22T10:10:13 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be in the range 0 - 9.
at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:83)
at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:82)
at com.github.vitalibo.brickgame.core.ui.DigitTest.testSetIllegalValue(DigitTest.java:72)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.DigitTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
